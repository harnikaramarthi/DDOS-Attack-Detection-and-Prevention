🧠 1. What is a Normal Server?
A normal (application) server is the main backend that handles business logic. It processes requests from users, performs database lookups, serves HTML or API responses, and manages core operations.

Example:

rust
Copy
Edit
Browser ---> http://yourwebsite.com ---> Application Server (serves data)
Problem:
These servers are usually exposed to the public internet. Anyone — including bots or malicious actors — can send requests to them. If too many requests arrive simultaneously (even if fake), the server can become overwhelmed, slow, or crash. This makes normal servers vulnerable to abuse if not protected.

🔁 2. What is a Proxy Server?
A proxy server acts as a middle layer between the client (user) and your actual application server. It filters, inspects, and routes traffic.

Example:

arduino
Copy
Edit
User ---> Proxy Server ---> Your Application Server
Types of Proxies:

Forward Proxy: Sits in front of the client, hiding the client from the server.

Reverse Proxy (like in our case): Sits in front of the backend server, hiding the server from direct exposure.

Why use a proxy?

Controls incoming traffic before it reaches your core app.

Can block suspicious IPs or bots.

Enables rate limiting, inspection, logging, and protection at the edge layer.

Makes your app server focus only on legitimate, clean requests.

🛑 3. What is Rate Limiting?
Rate limiting restricts how many requests a user (typically based on IP address) can send to your server within a specific time frame.

Example: If the rate limit is 5 requests per second and a user sends 10 requests, only the first 5 are allowed, and the remaining 5 are rejected.

Why it matters:

Prevents request spamming and brute-force attacks.

Stops bots from flooding your endpoints.

Helps stabilize performance and reduce load on your server.

In this project, we use a Token Bucket Algorithm to manage rate limits efficiently.

💣 4. What is a DDoS Attack?
A Distributed Denial of Service (DDoS) attack is when thousands (or millions) of machines (usually bots) flood your server with requests at the same time, intending to:

Overwhelm your bandwidth

Exhaust your CPU or memory

Slow down or crash your application

Common signs:

Sudden spike in traffic

Multiple requests from hundreds/thousands of IPs

Unresponsive or slow application performance

🛡️ 5. How BlockPortal Stops DDoS & Bots
This project includes several protective mechanisms that block abusive patterns before they ever reach your backend server.

✅ Rate Limiting
Controls how often each IP can send requests.

Protects against brute force, login attacks, and request floods.

Example: A bot tries to log in 100 times in a second — after 5 attempts, it's blocked.

🔍 Pattern Detection
Monitors for repeated access to common attack paths like /login, /admin, /wp-admin, config.php, etc.

Blocks IPs that match suspicious URL patterns or perform scanning behavior.

Example: A bot scans multiple file names trying to guess server configs — gets flagged and blocked.

🧱 Payload Size Limiting
Rejects requests that exceed a certain size (e.g., more than 1MB).

Prevents attackers from sending huge payloads to consume memory or disk resources.

Example: A bot uploads 10MB files repeatedly — gets blocked with a 413 Payload Too Large.

🚫 IP Blacklisting
Tracks repeated violations from the same IP.

If an IP breaks too many rules (rate limit, patterns, size), it gets temporarily blacklisted (e.g., 5 minutes).

Helps prevent persistent abuse by cutting off bad actors automatically.

🔃 Token Bucket Algorithm (Used for Rate Limiting)
Each IP address has a “bucket” that holds a fixed number of tokens (e.g., 5).

Each incoming request uses up one token.

Tokens regenerate at a fixed rate (e.g., 1 token per second).

If there are no tokens left, the request is denied with a 429 Too Many Requests.

This approach is lightweight, fair, and efficient for managing bursts.

🔒 6. Summary: How All Features Combine to Protect the Server

Feature	What It Stops	How It Helps
Rate Limiting	Spamming, brute force, scraping	Controls request rate per IP
Pattern Detection	Scanner bots, vulnerability probing	Detects and blocks bad behavior
Payload Limits	File upload attacks, memory overload	Filters large/bomb requests
IP Blacklisting	Persistent attackers	Automatically bans repeat offenders
Proxy Layer	DDoS and malicious requests	Filters traffic before the backend
🧪 Real-World Use Cases (as Implemented in BlockPortal)
A bot refreshes a page 1000 times → gets rate limited → receives HTTP 429.

A vulnerability scanner hits multiple sensitive paths (/login, /admin, etc.) → gets flagged → IP blacklisted.

A bot uploads repeated 10MB payloads → rejected with HTTP 413 Payload Too Large.

An attacker keeps breaking rules → temporarily banned for 5 minutes (cool-off window).

🚀 Why This Is Powerful
Without a proxy layer, your backend application directly handles all incoming traffic — including abusive bots and attackers. This leads to:

Downtime

System slowdowns

Security risks

With BlockPortal:

Only verified, controlled traffic reaches the application.

Bad actors are filtered at the edge, before any damage is done.

You get visibility, logging, and control — all in one place.

This architecture not only improves app performance and stability but also adds a strong layer of security and resilience against common web threats.